--> Scope

Scope: Alcance que tienen las variables en el codigo.

Existen 2 tipos de scopes.

 - Global: Puede ser llamada a lo largo de nuestro programa.
 - Local: Solo puede ser llamada dentro del bloque de codigo en el que se declaro.


--> Hoisting

Hoisting es cuando las variables y las funciones se declaran antes de que se procese cualquier tipo de código. El Hoisting funciona de
  ECMAScript 5 para abajo, de ECMAScript 6 en adelante no sucede porque el Hoisting sucede con var y function. En las versiones de
  ECMAScript 6 en adelante aparece const y let.

¿Qué es Hoisting?
  En JavaScript, las declaraciones (por ejemplo, de variables o funciones) se mueven al principio de su scope o ámbito.
  Este comportamiento se conoce como hoisting y es muy importante tenerlo en cuenta a la hora de programar para prevenir posibles errores.

Las funciones siempre se mueven arriba del scope. Por lo tanto, podemos elegir donde declararlas y usarlas.
  laración de las variables se mueven arriba del scope, pero no la asignación. Antes de usar una variable, habrá que crearla y asignarla.

Hoisting: Sucede cuando llamamos una variable antes de declararla e inicializarla.
  var (solo la declaración), la function (por completo) y el import (por completo) “suben” hacia arriba del scope.
  Se modifica la forma en que JS interpreta nuestro código


--> Coerción

Coerción es la forma en la que podemos cambiar un tipo de valor a otro.

Existen dos tipos:

 - Implicita: El lenguaje cambia los tipos de valores para que funcione el codigo.

  Ej: var a = 4 + "7"; => a es de tipo "String"
      var b 4 * "7"; => b es de tipo "number"

 - Explicita: Es cuando nosotros obligamos a que una variable cambia de un tipo de valor a otro tipo.

  Ej: var a = 20;
      var b = a + ""; => Me toma "a" de tipo String
      var c = String(a); => Obligo a que cambie "a" a tipo String
      var d = Number(c) => Obligo a cambiar "a" a tipo Number


--> Valores: Truthy y Falsy

¿Que tipos por default son verdaderos y falsos?

Usamos la funcion de JS que es Boolean() dentro del paréntesis ponemos el valor

--> Falsy
  Boolean() —> sin ningun valor es false
  Boolean(0) —> false
  Boolean(null) —> false
  Boolean(NaN) —> false // NaN es Not and Number
  Boolean(Undefined) —> false
  Boolean(false) —> false
  Boolean("") —> false

--> Truthy
  Boolean(1) —> true //cualquier numero que no sea igual a cero es true
  Boolean("a") —> true
  Boolean(" ") —> true // siendo un espacio el valor es true
  Boolean([]) —> true // un array nos da un true
  Boolean({}) —> true // un objeto nos da el valor de true
  Boolean(function() {}) —> true //una funcion tambien es true
  Boolean(true) —> true

Todo esto lo vamos a usar en condiciones del tipo esto valida si es verdadero o falso para ejecutar cierta acción.

Enlaces a documentacion en mozilla de Truthy y Falsy
https://developer.mozilla.org/es/docs/Glossary/Falsy
https://developer.mozilla.org/es/docs/Glossary/Truthy


--> Operadores: Asignación, Comparación y Aritméticos.

 - ARITMETICOS

  + // Suma a + b,  afirmación unitaria +a : Positivo, concatenación "a" + "la" : "ala"
  - // Resta a - b, negación unitaria -a : Negativo
  * // Producto a * b
  / // Divisor a / b
  % // Residuo a % b
  ** // Potencia a ** b, a elevado a b
  ++ // Incremento (suma uno) a++ : a = a + 1
  -- // Decremento (resta uno) a-- : a = a - 1

 - ASIGNACIÓN

  = // Asignación a = b
  += // Asignación de adición  a += b : a = a + b
  -= // Asignación de sustracción  a -= b : a = a - b
  *= // Asignación de multiplicación  a *= b : a = a * b
  /= // Asignación de división  a /= b : a = a / b
  %= // Asignación de residuo  a %= b : a = a % b
  **= // Asignación de potencia  a **= b : a = a ** b
  <<= // Asignación de desplazamiento a la izquierda  a <<= b : a = a << b
  >>= // Asignación de desplazamiento a la derecha  a >>= b : a = a >> b
  >>>= // Asignación sin signo de desplazamiento a la derecha  a >>>= b : a = a >>> b
  &= // Asignación AND  a &= b : a = a & b
  ^= // Asignación XOR  a ^= b : a = a ^ b
  |= // Asignación OR  a |= b : a = a | b

 - COMPARACIÓN

  == // Igualdad a == b, a tiene el mismo valor que b
  != // Distinto a != b, a tiene un valor diferente a b
  === // Identidad a === b igual valor igual tipo de dato
  !== // Sin Identidad a !== b igual valor o igual tipo de dato
  > // Mayor que a > b
  >= // Mayor o igual que a >= b
  < // Menor que a < b
  <= // Menor o igual que a <= b

 - LOGICOS

  && // AND, Y, a && b : a y b
  || // OR, O, a || b : a o b
  ! // NOT, Negación, a = true : !a = false

 - LOGICOS A NIVEL DE BITS

  << // Desplazamiento a la izquierda  a << b
  >> // Desplazamiento a la derecha  a >> b
  >>> // Desplazamiento a la derecha sin signo  a >>> b
  & // AND  a & b
  ^ // XOR  a ^ b
  | // OR  a | b
  ~ // NOT  a | b